{"version":3,"sources":["webpack:///./refs/refs.js","webpack:///./components/fetchCountries.js","webpack:///./components/create-markup.js","webpack:///./index.js"],"names":["refs","input","document","querySelector","container","fetchCountries","searchQuery","fetch","then","data","json","catch","error","console","log","clearMarkup","innerHTML","defaultModules","set","PNotifyMobile","addEventListener","_","value","dataHandler","countries","markup","length","name","capital","population","languages","reduce","acc","li","flag","updateMarkup","dataLength","text","delay"],"mappings":"yIAAaA,G,UAAO,CAClBC,MAAOC,SAASC,cAAc,kBAC9BC,UAAWF,SAASC,cAAc,gBCGrBE,G,oBALQ,SAAAC,GACrB,OAAOC,MAAM,yCAAyCD,GACnDE,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QC+BnBG,G,oBAAc,WACzBf,EAAKI,UAAUY,UAAY,K,wDCzB7BC,iBAAeC,IAAIC,EAAe,IAElCnB,EAAKC,MAAMmB,iBACT,QACAC,YAAW,WACLrB,EAAKC,MAAMqB,MACbjB,EAAeL,EAAKC,MAAMqB,OACvBd,MAAK,SAAAC,GAAI,OAAIc,EAAYd,MACzBD,MAAK,SAAAC,GAAI,ODmBU,SAAAA,GAC1B,IArCmBe,EAqCbC,EApCmB,KADND,EAqCSf,GApCdiB,OAEV,qCAC4BF,EAAU,GAAGG,KADzC,iGAIeH,EAAU,GAAGI,QAJ5B,+BAKkBJ,EAAU,GAAGK,WAL/B,uCAQAL,EAAU,GAAGM,UAAUC,QAAO,SAACC,EAAKC,GAElC,OADAD,GAAO,OAAOC,EAAGN,KAAd,UAEF,IAXH,kCAcMH,EAAU,GAAGU,KAdnB,UAciCV,EAAU,GAAGG,KAd9C,wCAiBOH,EAAUE,QAAU,GAE3B,mBAEAF,EAAUO,QAAO,SAACC,EAAKC,GAErB,OADAD,GAAO,OAAOC,EAAGN,KAAd,UAEF,IALH,mBAFG,EAkBP3B,EAAKI,UAAUY,UAAYS,ECrBPU,CAAa1B,MAC1BE,OAAM,WACLI,OAECA,MACN,MAGL,IAAMQ,EAAc,SAAAd,GAClB,IAAM2B,EAAa3B,EAAKiB,OACxB,GAAIU,EAAa,GACfrB,IACAH,gBAAM,CACJyB,KACE,wEACFC,MAAO,UAEJ,IAAIF,GAAc,GAAKA,GAAc,GAC1C,OAAO3B,EAEPM,IACAH,gBAAM,CACJyB,KAAM,mBACNC,MAAO,U","file":"main.de5760d28b461a7909c4.js","sourcesContent":["export const refs = {\r\n  input: document.querySelector('.country-input'),\r\n  container: document.querySelector('.container'),\r\n};\r\n","const fetchCountries = searchQuery => {\r\n  return fetch(`https://restcountries.eu/rest/v2/name/${searchQuery}`)\r\n    .then(data => data.json())\r\n    .catch(error => console.log(error));\r\n};\r\nexport default fetchCountries;\r\n","import { refs } from '../refs/refs.js';\r\nconst createMarkup = countries => {\r\n  if (countries.length === 1) {\r\n    const markup =\r\n      `\r\n      <h2 class=\"country-title\">${countries[0].name}</h2>\r\n      <div class=\"content\">\r\n      <div class=\"text-content\">     \r\n<p><b>Capital: </b>${countries[0].capital}</p>\r\n<p><b>Population: </b>${countries[0].population}</p>\r\n<p><b>Languages:</b></p>\r\n<ul>` +\r\n      countries[0].languages.reduce((acc, li) => {\r\n        acc += `<li>${li.name}</li>`;\r\n        return acc;\r\n      }, '') +\r\n      `</ul>\r\n      </div>\r\n<img src=\"${countries[0].flag}\" alt=\"${countries[0].name}'s flag\" class=\"flag-image\"></div>\r\n`;\r\n    return markup;\r\n  } else if (countries.length <= 10) {\r\n    const markup =\r\n      `\r\n          <ul>` +\r\n      countries.reduce((acc, li) => {\r\n        acc += `<li>${li.name}</li>`;\r\n        return acc;\r\n      }, '') +\r\n      `</ul>\r\n    `;\r\n    return markup;\r\n  }\r\n};\r\nexport const clearMarkup = () => {\r\n  refs.container.innerHTML = '';\r\n};\r\nexport const updateMarkup = data => {\r\n  const markup = createMarkup(data);\r\n  refs.container.innerHTML = markup;\r\n};\r\n","import * as _ from 'lodash';\r\nimport './styles.css';\r\nimport { refs } from './refs/refs.js';\r\nimport fetchCountries from './components/fetchCountries.js';\r\nimport { clearMarkup, updateMarkup } from './components/create-markup.js';\r\nimport '@pnotify/core/dist/PNotify.css';\r\nimport '@pnotify/core/dist/BrightTheme.css';\r\nimport '@pnotify/confirm/dist/PNotifyConfirm.css';\r\nimport { error, defaultModules } from '@pnotify/core/dist/PNotify';\r\nimport * as PNotifyMobile from '@pnotify/mobile/dist/PNotifyMobile.js';\r\ndefaultModules.set(PNotifyMobile, {});\r\n\r\nrefs.input.addEventListener(\r\n  'input',\r\n  _.debounce(() => {\r\n    if (refs.input.value) {\r\n      fetchCountries(refs.input.value)\r\n        .then(data => dataHandler(data))\r\n        .then(data => updateMarkup(data))\r\n        .catch(() => {\r\n          clearMarkup();\r\n        });\r\n    } else clearMarkup();\r\n  }, 500),\r\n);\r\n\r\nconst dataHandler = data => {\r\n  const dataLength = data.length;\r\n  if (dataLength > 10) {\r\n    clearMarkup();\r\n    error({\r\n      text:\r\n        'Too many countries found. Please provide a more specific search query',\r\n      delay: 5000,\r\n    });\r\n  } else if (dataLength >= 1 && dataLength <= 10) {\r\n    return data;\r\n  } else {\r\n    clearMarkup();\r\n    error({\r\n      text: 'No matches found',\r\n      delay: 3000,\r\n    });\r\n  }\r\n};\r\n"],"sourceRoot":""}